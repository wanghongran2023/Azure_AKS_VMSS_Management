name: Infra Construction and App Deploy

on:
  workflow_dispatch:

permissions:
  id-token: write
  actions: write
  checks: write
  contents: write

jobs:  
  DeployAPPInsights:
    name: Deploy AppInsghts By Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform binary
        uses: actions/cache@v3
        with:
          path: /usr/bin/terraform
          key: terraform-cache-${{ runner.os }}-${{ hashFiles('**/terraform') }}
          restore-keys: |
            terraform-cache-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Update Terraform Setup
        working-directory: Terraform/Part1
        run: |
           sed -i "s|{tmp_subscription_id}|${{ secrets.SUBSCRIPTION_ID }}|g" variables.tfvars
           sed -i "s|{tmp_tenant_id}|${{ secrets.TENANT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_id}|${{ secrets.SP_CLIENT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_secret}|${{ secrets.SP_CLIENT_SECRET }}|g" variables.tfvars

           sed -i "s|{tmp_resource_group_name}|${{ vars.RESOURCE_GROUP_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_resource_group_location}|${{ vars.RESOURCE_GROUP_LOCATION }}|g" variables.tfvars

      - name: Start Terraform Deploy
        working-directory: Terraform/Part1
        run: |
          terraform init
          terraform validate
          terraform fmt
          terraform plan -var-file=variables.tfvars
          terraform apply -auto-approve -var-file=variables.tfvars
          connection_string=$(terraform output -raw connection_string)
          if [ -z "$connection_string" ]; then
            echo "Error: connection_string is empty!"
            exit 1
          fi
          echo "$connection_string" > ../../connection_string.txt

      - name: Upload Connection String as artifact
        uses: actions/upload-artifact@v4
        with:
          name: connection_string
          path: connection_string.txt

  EditAppDeployFile:
    name: Update App Deploy File with Connection String
    needs: DeployAPPInsights
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Download Connection String
        uses: actions/download-artifact@v4
        with:
          name: connection_string

      - name: Update Connection String
        working-directory: azure-vote
        run: |
          rm -f main.py
          cp main_template.py main.py
          CONNECTION_STRING=$(cat ../connection_string.txt)
          ESCAPED_CONNECTION_STRING=$(echo "$CONNECTION_STRING" | sed 's/[&/]/\\&/g')
          sed -i "s|{tmp_connection_string}|$ESCAPED_CONNECTION_STRING|g" main.py

      - name: Commit changes
        working-directory: azure-vote
        run: |
          git config --global user.name "Github Action"
          git config --global user.email "githubaction@example.com"
          git add main.py
          git commit -m "Update main.py with new key"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  DeployInfraAndBuild:
    name: Deploy Infra and Build
    needs: EditAppDeployFile
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform binary
        uses: actions/cache@v3
        with:
          path: /usr/bin/terraform
          key: terraform-cache-${{ runner.os }}-${{ hashFiles('**/terraform') }}
          restore-keys: |
            terraform-cache-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Update Terraform Setup
        working-directory: Terraform/Part2
        run: |
           sed -i "s|{tmp_subscription_id}|${{ secrets.SUBSCRIPTION_ID }}|g" variables.tfvars
           sed -i "s|{tmp_tenant_id}|${{ secrets.TENANT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_id}|${{ secrets.SP_CLIENT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_secret}|${{ secrets.SP_CLIENT_SECRET }}|g" variables.tfvars

           sed -i "s|{tmp_resource_group_name}|${{ vars.RESOURCE_GROUP_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_resource_group_location}|${{ vars.RESOURCE_GROUP_LOCATION }}|g" variables.tfvars

      - name: Start Terraform Deploy
        working-directory: Terraform/Part2
        run: |
          terraform init
          terraform validate
          terraform fmt
          terraform plan -var-file=variables.tfvars
          terraform apply -auto-approve -var-file=variables.tfvars
      
      - name: Output ACR Server
        working-directory: Terraform/Part2
        run: |
          acr_login_server=$(terraform output -raw acr_login_server)
          if [ -z "$acr_login_server" ]; then
            echo "Error: acr_login_server string is empty!"
            exit 1
          fi
          echo "$acr_login_server" > acr_login_server.txt
          
          acr_name=$(terraform output -raw acr_name)
          if [ -z "$acr_name" ]; then
            echo "Error: acr_name string is empty!"
            exit 1
          fi
          echo "$acr_name" > acr_name.txt

      - name: Upload Acr Login Server as artifact
        uses: actions/upload-artifact@v4
        with:
          name: acr_login_server
          path: |
            ./Terraform/Part2/acr_login_server.txt
            ./Terraform/Part2/acr_name.txt
        
  DeployImageForAKS:
    name: Build Image for AKS
    needs: DeployInfraAndBuild
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
        
      - name: Download Acr Login Server artifact
        uses: actions/download-artifact@v4
        with:
          name: acr_login_server

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SP_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
            az storage -h
            
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      - name: Build and Upload Docker Image for Deploy
        run: |
          ACR_REGISTRY=$(cat acr_login_server.txt)
          ACR_NAME=$(cat acr_name.txt)
          az acr login --name $ACR_NAME
          docker-compose up -d --build

      - name: Push Image
        run: |
          docker tag azure-vote-front:v1 $ACR_REGISTRY/azure-vote-front:v1
          docker push $ACR_REGISTRY/azure-vote-front:v1

          docker tag mcr.microsoft.com/oss/bitnami/redis:6.0.8 $ACR_REGISTRY/bitnami-redis:6.0.8
          docker push $ACR_REGISTRY/bitnami-redis:6.0.8
